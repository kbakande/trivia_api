{"ast":null,"code":"import _toConsumableArray from\"/Users/ko-akande/OneDrive - UWE Bristol (Staff)/Personal/udacity_projects/trivia_api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/Users/ko-akande/OneDrive - UWE Bristol (Staff)/Personal/udacity_projects/trivia_api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/ko-akande/OneDrive - UWE Bristol (Staff)/Personal/udacity_projects/trivia_api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/ko-akande/OneDrive - UWE Bristol (Staff)/Personal/udacity_projects/trivia_api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/ko-akande/OneDrive - UWE Bristol (Staff)/Personal/udacity_projects/trivia_api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/ko-akande/OneDrive - UWE Bristol (Staff)/Personal/udacity_projects/trivia_api/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import $ from'jquery';import'../stylesheets/QuizView.css';var questionsPerPlay=5;var QuizView=/*#__PURE__*/function(_Component){_inherits(QuizView,_Component);var _super=_createSuper(QuizView);function QuizView(props){var _this;_classCallCheck(this,QuizView);_this=_super.call(this);_this.selectCategory=function(_ref){var type=_ref.type,_ref$id=_ref.id,id=_ref$id===void 0?0:_ref$id;_this.setState({quizCategory:{type:type,id:id}},_this.getNextQuestion);};_this.handleChange=function(event){_this.setState(_defineProperty({},event.target.name,event.target.value));};_this.getNextQuestion=function(){var previousQuestions=_toConsumableArray(_this.state.previousQuestions);if(_this.state.currentQuestion.id){previousQuestions.push(_this.state.currentQuestion.id);}$.ajax({url:'/quizzes',//TODO: update request URL\ntype:\"POST\",dataType:'json',contentType:'application/json',data:JSON.stringify({previous_questions:previousQuestions,quiz_category:_this.state.quizCategory}),xhrFields:{withCredentials:true},crossDomain:true,success:function success(result){_this.setState({showAnswer:false,previousQuestions:previousQuestions,currentQuestion:result.question,guess:'',forceEnd:result.question?false:true});return;},error:function error(_error){alert('Unable to load question. Please try your request again');return;}});};_this.submitGuess=function(event){event.preventDefault();var formatGuess=_this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase();var evaluate=_this.evaluateAnswer();_this.setState({numCorrect:!evaluate?_this.state.numCorrect:_this.state.numCorrect+1,showAnswer:true});};_this.restartGame=function(){_this.setState({quizCategory:null,previousQuestions:[],showAnswer:false,numCorrect:0,currentQuestion:{},guess:'',forceEnd:false});};_this.evaluateAnswer=function(){var formatGuess=_this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase();var answerArray=_this.state.currentQuestion.answer.toLowerCase().split(' ');return answerArray.includes(formatGuess);};_this.state={quizCategory:null,previousQuestions:[],showAnswer:false,categories:{},numCorrect:0,currentQuestion:{},guess:'',forceEnd:false};return _this;}_createClass(QuizView,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;$.ajax({url:\"/categories\",//TODO: update request URL\ntype:\"GET\",success:function success(result){_this2.setState({categories:result.categories});return;},error:function error(_error2){alert('Unable to load categories. Please try your request again');return;}});}},{key:\"renderPrePlay\",value:function renderPrePlay(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-play-holder\"},/*#__PURE__*/React.createElement(\"div\",{className:\"choose-header\"},\"Choose Category\"),/*#__PURE__*/React.createElement(\"div\",{className:\"category-holder\"},/*#__PURE__*/React.createElement(\"div\",{className:\"play-category\",onClick:this.selectCategory},\"ALL\"),Object.keys(this.state.categories).map(function(id){return/*#__PURE__*/React.createElement(\"div\",{key:id,value:id,className:\"play-category\",onClick:function onClick(){return _this3.selectCategory({type:_this3.state.categories[id],id:id});}},_this3.state.categories[id]);})));}},{key:\"renderFinalScore\",value:function renderFinalScore(){return/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-play-holder\"},/*#__PURE__*/React.createElement(\"div\",{className:\"final-header\"},\" Your Final Score is \",this.state.numCorrect),/*#__PURE__*/React.createElement(\"div\",{className:\"play-again button\",onClick:this.restartGame},\" Play Again? \"));}},{key:\"renderCorrectAnswer\",value:function renderCorrectAnswer(){var formatGuess=this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase();var evaluate=this.evaluateAnswer();return/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-play-holder\"},/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-question\"},this.state.currentQuestion.question),/*#__PURE__*/React.createElement(\"div\",{className:\"\".concat(evaluate?'correct':'wrong')},evaluate?\"You were correct!\":\"You were incorrect\"),/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-answer\"},this.state.currentQuestion.answer),/*#__PURE__*/React.createElement(\"div\",{className:\"next-question button\",onClick:this.getNextQuestion},\" Next Question \"));}},{key:\"renderPlay\",value:function renderPlay(){return this.state.previousQuestions.length===questionsPerPlay||this.state.forceEnd?this.renderFinalScore():this.state.showAnswer?this.renderCorrectAnswer():/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-play-holder\"},/*#__PURE__*/React.createElement(\"div\",{className:\"quiz-question\"},this.state.currentQuestion.question),/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.submitGuess},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"guess\",onChange:this.handleChange}),/*#__PURE__*/React.createElement(\"input\",{className:\"submit-guess button\",type:\"submit\",value:\"Submit Answer\"})));}},{key:\"render\",value:function render(){return this.state.quizCategory?this.renderPlay():this.renderPrePlay();}}]);return QuizView;}(Component);export default QuizView;","map":{"version":3,"sources":["/Users/ko-akande/OneDrive - UWE Bristol (Staff)/Personal/udacity_projects/trivia_api/frontend/src/components/QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","error","alert","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","includes","categories","Object","keys","map","length","renderFinalScore","renderCorrectAnswer","renderPlay","renderPrePlay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5; \n\nclass QuizView extends Component {\n  constructor(props){\n    super();\n    this.state = {\n        quizCategory: null,\n        previousQuestions: [], \n        showAnswer: false,\n        categories: {},\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n    }\n  }\n\n  componentDidMount(){\n    $.ajax({\n      url: `/categories`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectCategory = ({type, id=0}) => {\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\n\n    $.ajax({\n      url: '/quizzes', //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: result.question ? false : true\n        })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    let evaluate =  this.evaluateAnswer()\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    })\n  }\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [], \n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    })\n  }\n\n  renderPrePlay(){\n      return (\n          <div className=\"quiz-play-holder\">\n              <div className=\"choose-header\">Choose Category</div>\n              <div className=\"category-holder\">\n                  <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\n                  {Object.keys(this.state.categories).map(id => {\n                  return (\n                    <div\n                      key={id}\n                      value={id}\n                      className=\"play-category\"\n                      onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\n                      {this.state.categories[id]}\n                    </div>\n                  )\n                })}\n              </div>\n          </div>\n      )\n  }\n\n  renderFinalScore(){\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\n      </div>\n    )\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n    return answerArray.includes(formatGuess)\n  }\n\n  renderCorrectAnswer(){\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    let evaluate =  this.evaluateAnswer()\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\n      </div>\n    )\n  }\n\n  renderPlay(){\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\n      ? this.renderFinalScore()\n      : this.state.showAnswer \n        ? this.renderCorrectAnswer()\n        : (\n          <div className=\"quiz-play-holder\">\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n            <form onSubmit={this.submitGuess}>\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\n            </form>\n          </div>\n        )\n  }\n\n\n  render() {\n    return this.state.quizCategory\n        ? this.renderPlay()\n        : this.renderPrePlay()\n  }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}